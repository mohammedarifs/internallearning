name: CI/CD

on:
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Workflows'
        required: true
        default: 'dataregistration'
        type: choice
        options:
          - dataregistration
          - tasks
          - end_to_end_flows
          - Priorities
      test_target:
        description: 'Components'
        required: true
        default: 'None'
        type: choice
        options:
          - None
          - All
          - physical
          - virtual
          - task1
          - task2
          - sql_to_azure
          - nas_to_azure
          - s3_to_azure
          - P1
          - P2
          - P3
      test_parameters:
        description: 'source'
        required: true
        default: 'csv'
        type: choice
        options:
          - All
          - csv
          - xml
          - json
          - parquet
jobs:
  test_case_execution:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/checkout@v4
        with:
          python-version: 3.13  #${{ matrix.python-version }}

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Run test
        run: pytest
#              if [  "${{ github.event.inputs.test_level }}" != "Priorities" ]; then
#                pytest .\${{ github.event.inputs.test_level }} -m ${{ github.event.inputs.test_target }}}
#              else
#                pytest -m ${{ github.event.inputs.test_target }}
#              fi

#      - name: Run pytest
#        run: |
#            if [ "${{ github.event.inputs.test_level }}" != "Priorities" ]; then
#              pytest .\${{ github.event.inputs.test_level }} -m ${{ github.event.inputs.test_target }}
#            elif [ "${{ github.event.inputs.test_level }}" == "Priorities" ]; then
#              pytest -m ${{ github.event.inputs.test_target }}
#          elif [ "${{ github.event.inputs.test_level }}" == "group" ]; then
#            print(${{ github.event.inputs.test_target }})
            fi
#          run: |
#            if [ "${{ github.event.inputs.filter_level_1 }}" == "file" ]; then
#              if [ -n "${{ github.event.inputs.filter_target_2 }}" ]; then
#                pytest ${{ github.event.inputs.filter_target_1 }} -k ${{ github.event.inputs.filter_target_2 }}
#              else
#                pytest ${{ github.event.inputs.filter_target_1 }}
#              fi
#            elif [ "${{ github.event.inputs.filter_level_1 }}" == "group" ]; then
#              pytest -m ${{ github.event.inputs.filter_target_1 }}
#            fi
